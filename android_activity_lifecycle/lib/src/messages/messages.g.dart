// BSD 3-Clause License
//
// Copyright (c) 2024, Nha NHV
// Autogenerated from Pigeon (v16.0.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

enum ActivityLifeCycleStateEnum {
  onCreate,
  onStart,
  onResume,
  onPause,
  onStop,
  onRestart,
  onDestroy,
}

abstract class MessageFlutterApi {
  static const MessageCodec<Object?> pigeonChannelCodec = StandardMessageCodec();

  void onActivityLifeCycleState(ActivityLifeCycleStateEnum state);

  static void setup(MessageFlutterApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.android_activity_lifecycle.MessageFlutterApi.onActivityLifeCycleState', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.android_activity_lifecycle.MessageFlutterApi.onActivityLifeCycleState was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final ActivityLifeCycleStateEnum? arg_state = args[0] == null ? null : ActivityLifeCycleStateEnum.values[args[0]! as int];
          assert(arg_state != null,
              'Argument for dev.flutter.pigeon.android_activity_lifecycle.MessageFlutterApi.onActivityLifeCycleState was null, expected non-null ActivityLifeCycleStateEnum.');
          try {
            api.onActivityLifeCycleState(arg_state!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
