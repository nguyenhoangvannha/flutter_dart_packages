// BSD 3-Clause License
//
// Copyright (c) 2024, Nha NHV
// Autogenerated from Pigeon (v16.0.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun createConnectionError(channelName: String): FlutterError {
  return FlutterError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class ActivityLifeCycleStateEnum(val raw: Int) {
  ONCREATE(0),
  ONSTART(1),
  ONRESUME(2),
  ONPAUSE(3),
  ONSTOP(4),
  ONRESTART(5),
  ONDESTROY(6);

  companion object {
    fun ofRaw(raw: Int): ActivityLifeCycleStateEnum? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class MessageFlutterApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by MessageFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
  }
  fun onActivityLifeCycleState(stateArg: ActivityLifeCycleStateEnum, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.android_activity_lifecycle.MessageFlutterApi.onActivityLifeCycleState"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(stateArg.raw)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
